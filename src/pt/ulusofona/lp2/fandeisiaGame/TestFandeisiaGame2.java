package pt.ulusofona.lp2.fandeisiaGame;

import org.junit.Test;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertEquals;

public class TestFandeisiaGame2 {
    @Test
    public void testGeral2() throws InsufficientCoinsException{
        FandeisiaGameManager testGeral2 = new FandeisiaGameManager();
        String elfo = "id: 1, type: Elfo, teamId: 10, x: 0, y: 2, orientation: Este";
        String gold = "id: 10, type: gold, x: 2, y: 2";
        String silver = "id: 11, type: silver, x: 3, y: 3";
        String bronze = "id: 12, type: bronze, x: 4, y: 4";
        String buraco = "id: 6, type: hole, x: 6, y: 6";
        String anao = "id: 2, type: Anão, teamId: 20, x: 5, y: 5, orientation: Norte";
        String gigante = "id: 2, type: Gigante, teamId: 20, x: 8, y: 8, orientation: Norte";
        String humano = "id: 2, type: Humano, teamId: 20, x: 7, y: 7, orientation: Norte";
        String dragao = "id: 2, type: Dragão, teamId: 20, x: 1, y: 0, orientation: Norte";
        String[] conj = {elfo, gold, buraco, silver, bronze, anao, dragao, humano, gigante};
        testGeral2.startGame(conj, 10, 10);
        Creature c1 = testGeral2.getCriaturaPorPosicao(0, 2);
        Creature c2 = testGeral2.getCriaturaPorPosicao(5,5);
        Creature c3 = testGeral2.getCriaturaPorPosicao(0,0);
        assertEquals(null, c3);
        Creature cEsperada = c1;
        Creature cReal = testGeral2.getCriaturaPorPosicao(0,2);
        assertEquals(cEsperada, cReal);
        List<String> strEsperada = new ArrayList();
        strEsperada.add("Netto Baptistella - A21907847");
        List<String> strReal = testGeral2.getAuthors();
        assertEquals(strEsperada, strReal);
        int intEsperado = 1;
        int intReal = testGeral2.getElementId(0,2);
        assertEquals(intEsperado, intReal);
        intEsperado = 6;
        intReal = testGeral2.getElementId(6,6);
        assertEquals(intEsperado, intReal);
        intEsperado = 11;
        intReal = testGeral2.getElementId(3,3);
        assertEquals(intEsperado, intReal);
        intEsperado = 0;
        intReal = testGeral2.getElementId(9,9);
        assertEquals(intEsperado, intReal);
        testGeral2.equipeAtual = testGeral2.ldr;
        intEsperado = 10;
        intReal = testGeral2.getCurrentTeamId();
        assertEquals(intEsperado, intReal);
        intEsperado = 0;
        intReal = testGeral2.getCurrentScore(10);
        assertEquals(intEsperado, intReal);
        c2.temSpell = true;
        c2.spellName = "SpellNameOK";
        String strEsperada2 = "SpellNameOK";
        String strReal2 = testGeral2.getSpell(5,5);
        assertEquals(strEsperada2, strReal2);
        strEsperada2 = null;
        assertEquals(strEsperada2, testGeral2.getSpell(9,9));
        intEsperado = 32;
        intReal = testGeral2.getCoinTotal(20);
        assertEquals(intEsperado, intReal);
        String[][] strEsperada3 = new String[5][4];
        strEsperada3[0][0] = "Anão";
        strEsperada3[0][1] = "lagarta.png";
        strEsperada3[0][2] = "Move H/V - 1 casa.";
        strEsperada3[0][3] = "1";
        strEsperada3[1][0] = "Dragão";
        strEsperada3[1][1] = "gato_de_cheshire.png";
        strEsperada3[1][2] = "Move H/V/D - 3 casas - Voa buracos e criaturas.";
        strEsperada3[1][3] = "9";
        strEsperada3[2][0] = "Elfo";
        strEsperada3[2][1] = "chapeleiro_maluco.PNG";
        strEsperada3[2][2] = "Move H/V/D - 2 casas - Salta Buracos.";
        strEsperada3[2][3] = "5";
        strEsperada3[3][0] = "Gigante";
        strEsperada3[3][1] = "rainha_de_copas.png";
        strEsperada3[3][2] = "Move H/V - 3 casas - Salta buracos e criaturas*.";
        strEsperada3[3][3] = "5";
        strEsperada3[4][0] = "Humano";
        strEsperada3[4][1] = "alice.png";
        strEsperada3[4][2] = "Move H/V - 2 casas.";
        strEsperada3[4][3] = "3";
        String[][] strReal3 = testGeral2.getCreatureTypes();
        assertEquals(strEsperada3[1][1], strReal3[1][1]);
        strEsperada3 = new String[9][3];
        strEsperada3[0][0] = "EmpurraParaNorte";
        strEsperada3[0][1] = "Move a criatura 1 unidade para o Norte";
        strEsperada3[0][2] = "1";
        strEsperada3[1][0] = "EmpurraParaEste";
        strEsperada3[1][1] = "Move a criatura 1 unidade para o Este";
        strEsperada3[1][2] = "1";
        strEsperada3[2][0] = "EmpurraParaSul";
        strEsperada3[2][1] = "Move a criatura 1 unidade para o Sul";
        strEsperada3[2][2] = "1";
        strEsperada3[3][0] = "EmpurraParaOeste";
        strEsperada3[3][1] = "Move a criatura 1 unidade para o Oeste";
        strEsperada3[3][2] = "1";
        strEsperada3[4][0] = "ReduzAlcance";
        strEsperada3[4][1] = "Reduz o alcance da criatura para: MIN (alcance original,1)";
        strEsperada3[4][2] = "2";
        strEsperada3[5][0] = "DuplicaAlcance";
        strEsperada3[5][1] = "Aumenta o alcance da criatura para o dobro";
        strEsperada3[5][2] = "3";
        strEsperada3[6][0] = "Congela";
        strEsperada3[6][1] = "A criatura alvo não se move neste turno";
        strEsperada3[6][2] = "3";
        strEsperada3[7][0] = "Congela4Ever";
        strEsperada3[7][1] = "A criatura alvo não se move mais até ao final do jogo";
        strEsperada3[7][2] = "10";
        strEsperada3[8][0] = "Descongela";
        strEsperada3[8][1] = "Inverte a aplicação de um Feitiço Congela4Ever";
        strEsperada3[8][2] = "8";
        strReal3 = testGeral2.getSpellTypes();
        assertEquals(strEsperada3[1][1], strReal3[1][1]);
        Map<String, Integer> mapEsperado;
        Map<String, Integer> mapReal = testGeral2.createComputerArmy();
        mapEsperado = mapReal;
        assertEquals(mapEsperado, mapReal);
        File arquivo = new File("arquivo.txt");
        testGeral2.saveGame(arquivo);
        assertEquals(true, testGeral2.saveGame(arquivo));
        testGeral2.loadGame(arquivo);
        assertEquals(true, testGeral2.loadGame(arquivo));
        testGeral2.toggleAI(testGeral2.active);
        boolean t1 = true;
        assertEquals(true, t1);
        testGeral2.toggleAI(testGeral2.active);
        t1 = false;
        assertEquals(t1, testGeral2.active);
    }
}
